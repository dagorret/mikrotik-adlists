name: Build unified adlist

on:
  schedule:
    - cron: "0 */12 * * *"   # cada 12 horas
  workflow_dispatch:

permissions:
  contents: write        # commit/push + releases
  pages: write           # publicar GitHub Pages
  id-token: write        # requerido por deploy-pages

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute tag name
        id: meta
        run: |
          TAG="daily-$(date +%Y%m%d)"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Fetch & build lists
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p build tmp
          : > tmp/raw.txt

          # 1) Descargar fuentes definidas en sources.txt
          if [ ! -f sources.txt ]; then
            echo "ERROR: falta sources.txt en la raíz del repo." >&2
            exit 1
          fi
          while read -r u; do
            [ -z "${u:-}" ] && continue
            curl -fsSL "$u" >> tmp/raw.txt || true
            echo >> tmp/raw.txt
          done < sources.txt

          # 2) Normalizar y extraer candidatos de distintas sintaxis
          #    - elimina CR, comentarios in-line, espacios y líneas vacías
          #    - extrae desde AdBlock (||dominio^)
          #    - extrae host desde URL (http(s)://host/...)
          #    - elimina prefijos de hosts (0.0.0.0 / 127.0.0.1) y "www."
          cat tmp/raw.txt \
            | tr -d '\r' \
            | sed -E 's/[[:space:]]+#.*$//' \
            | sed -E 's/^[[:space:]]+//; s/[[:space:]]+$//' \
            | awk 'NF' \
            | sed -E 's#^\|\|([^/\^]+)\^.*$#\1#' \
            | sed -E 's#^https?://([^/]+).*#\1#' \
            | sed -E 's/^(0\.0\.0\.0|127\.0\.0\.1)[[:space:]]+//; s/^www\.//' \
            | sed -E 's/^\.+//' \
            > tmp/candidates.txt

          # 3) Validación FQDN estricta:
          #    - solo [a-z0-9.-], minúsculas
          #    - al menos un punto, sin ".."
          #    - TLD alfabético 2..63
          #    - etiquetas 1..63, sin guión al inicio/fin
          awk '{
            d=tolower($0)
            if (d ~ /[^a-z0-9.-]/) next
            if (d ~ /^\./) next
            if (d ~ /\.\./) next
            n=split(d,a,".")
            if (n<2) next
            t=a[n]
            if (t !~ /^[a-z]{2,63}$/) next
            ok=1
            for(i=1;i<=n;i++){
              if (length(a[i])<1 || length(a[i])>63) { ok=0; break }
              if (a[i] ~ /^-/ || a[i] ~ /-$/)       { ok=0; break }
            }
            if (ok) print d
          }' tmp/candidates.txt \
          | sort -u > tmp/merged.valid.txt

          # 4) Whitelist y Blacklist (opcionales)
          if [ -f whitelist.txt ]; then
            grep -vxFf whitelist.txt tmp/merged.valid.txt > tmp/nowhite.txt || cp tmp/merged.valid.txt tmp/nowhite.txt
          else
            cp tmp/merged.valid.txt tmp/nowhite.txt
          fi
          cat tmp/nowhite.txt blacklist.txt 2>/dev/null | sort -u > build/domains.txt

          # 5) Artefactos por sistema
          # AdBlock / uBlock / AdGuard syntax
          awk '{print "||"$1"^"}' build/domains.txt > build/unified-adblock.txt
          cp build/unified-adblock.txt build/unified-adguard.txt

          # Technitium (dos variantes)
          cp build/domains.txt build/technitium-domains.txt
          awk '{print "0.0.0.0 "$1}' build/domains.txt > build/technitium-hosts.txt

          # Pi-hole / dnsmasq
          awk '{print "0.0.0.0 "$1}' build/domains.txt > build/pihole-hosts.txt
          awk '{print "address=/"$1"/0.0.0.0"}' build/domains.txt > build/dnsmasq.conf

          # Unbound
          awk '{print "local-zone: \""$1"\" always_nxdomain"}' build/domains.txt > build/unbound.conf

          # 6) Índice para GitHub Pages
          cat > build/index.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>Blocklists</title>
          <h1>Blocklists</h1>
          <p>Listas generadas automáticamente. Elegí el formato según tu sistema:</p>
          <ul>
            <li><a href="unified-adblock.txt">AdBlock / uBlock (||dominio^)</a></li>
            <li><a href="unified-adguard.txt">AdGuard (||dominio^)</a></li>
            <li><a href="technitium-domains.txt">Technitium (dominio por línea)</a></li>
            <li><a href="technitium-hosts.txt">Technitium (hosts)</a></li>
            <li><a href="pihole-hosts.txt">Pi-hole / hosts</a></li>
            <li><a href="dnsmasq.conf">dnsmasq config</a></li>
            <li><a href="unbound.conf">Unbound config</a></li>
            <li><a href="domains.txt">Base de dominios</a></li>
            <li><a href="SHA256SUMS">SHA256SUMS</a></li>
          </ul>
          <p>Actualización automática cada 12 horas.</p>
          HTML

          # 7) Checksums
          (cd build && sha256sum domains.txt unified-adblock.txt unified-adguard.txt technitium-domains.txt technitium-hosts.txt pihole-hosts.txt dnsmasq.conf unbound.conf > SHA256SUMS || shasum -a 256 domains.txt unified-adblock.txt unified-adguard.txt technitium-domains.txt technitium-hosts.txt pihole-hosts.txt dnsmasq.conf unbound.conf > SHA256SUMS)

      - name: Commit build artifacts
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add build/
          git commit -m "Daily build: lists + configs" || echo "No changes"
          git push

      # Publicar artefactos como "Pages" artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Crea/actualiza el tag diario y publica un Release con los archivos de build/
      - name: Prepare files
        run: |
          mkdir -p build
          git checkout -- build || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          name: "Daily build ${{ needs.build.outputs.tag }}"
          body: |
            Blocklists generadas automáticamente (AdBlock, AdGuard, Technitium, Pi-hole, dnsmasq, Unbound).
          files: |
            build/domains.txt
            build/unified-adblock.txt
            build/unified-adguard.txt
            build/technitium-domains.txt
            build/technitium-hosts.txt
            build/pihole-hosts.txt
            build/dnsmasq.conf
            build/unbound.conf
            build/SHA256SUMS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy_pages:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
